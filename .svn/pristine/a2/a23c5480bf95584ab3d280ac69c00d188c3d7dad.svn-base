<script>
	export default {
		globalData: {
			userInfo: {
				userId: 0,
				userRole: "",
				userToken: "",
				userNick: "",
				userHeadPic: "",
				phoneNumber: "",
				userPermissions: "",
				currency: "",
			},
			token: "",
			userId: null,
			cid: null,
			isWithinProgram: true,
			pageInItem:'',
			
			g_chat : null
		},
		onLaunch() {
			//#ifdef APP-PLUS
			let token = uni.getStorageSync("token");
			if (token) {
				setTimeout(() => {
					getApp().globalData.token = token;
					getApp().globalData.userId = uni.getStorageSync('userId');

				}, 1000)
			}

			console.log("APP升级更新");
			console.log(plus.runtime);
			// "appid": plus.runtime.appid
			let type = uni.getSystemInfoSync().platform;
			let version = plus.runtime.version.split(".").join("");

			let req = {
				//升级检测数据
				type: type,
			};

			uni.request({
				url: this.$baseUrl + "/wechat/api/versionGet",
				data: req,
				success: (res) => {
					console.log("APP升级更新信息获取成功");
					console.log(res);
					if (res.data.version != version) {
						this.updateNew(res.data.url);
					}
				},
			});


			// 监听点击通知栏消息事件
			plus.push.addEventListener("click", (message) => {
				console.log('点击通知栏消息进行对应跳转', message);

				// 清空系统通知栏中该应用的所有通知消息
				plus.push.clear();
			});
			// 透传消息： 即自定义消息，UniPush推送服务只负责消息传递，不做任何处理，客户端在接收到透传消息后需要自己去处理消息的展示方式或后续动作。
			// 监听接收透传消息事件，透传消息在系统通知栏中不显示，前端要进行显示处理
			// 符合格式的透传消息会自动显示在通知栏，应设置不符合格式的
			plus.push.addEventListener("receive", (message) => {
				console.log('透传消息');
				console.log(message);

				// 判断不在app内，应用后台运行，创建本地消息并添加到系统通知栏
				if (getApp().globalData.isWithinProgram == false) {
					let platform = uni.getSystemInfoSync().platform;
					let content = JSON.parse(message.content);

					if (platform == "ios") {
						//ios平台应用在前台时,不能收到通知消息,只能走透传,在创建一条本地消息
						if (message.type == "receive") { // 这里判断触发的来源，否则一直推送。
							plus.push.createMessage(content.contentText, JSON.stringify(message.payload), {
								title: message.title
							});
						}
					} else if (platform == 'android') {
						plus.push.createMessage(content.contentText, JSON.stringify(message.payload), {
							title: message.title
						});
					}


					console.log('正式透传消息要不在应用内进行消息显示');
					// content: ( String ) 必选
					// 消息显示的内容，在系统通知中心中显示的文本内容。
					// payload: ( String ) 可选
					// 消息承载的数据，可根据业务逻辑自定义数据格式。
					// options: ( MessageOptions ) 可选
					// 创建消息的额外参数，参考MessageOptions。
					// (content, payload, option);

					// let msg = JSON.parse(message.content).contentText;
					// let options = {
					// 	cover: false, // 不覆盖上一次提示的消息
					// 	sound: 'system', // 使用系统提示音
					// 	title: message.title
					// };

					// plus.push.createMessage(msg, message.payload, options);
				}
			});
			//#endif

			this.getUserMsg();
		},
		onShow: () => {
			// 当 uni-app 启动，或从后台进入前台显示
			console.log("App Show");
			//#ifdef APP-PLUS
			getApp().globalData.isWithinProgram = true;
			
			let EnvUtils = plus.android.importClass("com.alipay.sdk.app.EnvUtils");
			EnvUtils.setEnv(EnvUtils.EnvEnum.SANDBOX);
			//#endif
		},
		onHide: () => {
			// 当 uni-app 从前台进入后台
			console.log("App Hide");
			//#ifdef APP-PLUS
			getApp().globalData.isWithinProgram = false;
			//#endif
		},
		methods: {
			// 获取用户信息
			getUserMsg() {
				let token = uni.getStorageSync("token");
				if (token.length !== 0) {
					uni.request({
						url: this.$baseFileUrl + "/userMsg",
						method: "GET",
						header: {
							"content-type": "application/json",
							token: token,
						},
						complete: (ret) => {
							if (this.checkBack(ret, true) == true) {
								this.setUserInfo(ret);
								this.$isResolve();
								
								
							} else {
								this.createTempChat();
								this.$isResolve();
							}
						},
					});
				} else {
					this.createTempChat();
					this.$isResolve();
				}
			},
			updateNew(url) {
				uni.showModal({
					//提醒用户更新
					title: "更新提示",
					content: "新版本已经准备好，是否立即更新？",
					//showCancel: false,
					cancelText: "稍后进行",
					confirmText: "立即更新",
					confirmColor: "#85dbd0",
					success: (ret) => {
						if (ret.confirm) {
							//this.updateNew('');
							//if(url)
							plus.runtime.openURL(url);
						}
					},
				});
			},
		},
	};
</script>

<style lang="scss">
	image {
		will-change: transform;
	}

	.no-data {
		padding-top: 450rpx;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;

		image {
			width: 222rpx;
			height: 152rpx;
		}

		text {
			margin-top: 40rpx;
			font-size: 26rpx;
			color: #c8c8c8;
		}
	}

	.uni-searchbar__box {
		border-radius: 30px !important;
		border: 0.5px solid #f8f8f8 !important;
	}

	/* #ifdef H5 */
	checkbox .uni-checkbox-input {
		border-radius: 50% !important;
	}

	uni-checkbox:not([disabled]) .uni-checkbox-input:hover {
		border-color: #85dbd0 !important;
	}

	checkbox .uni-checkbox-input.uni-checkbox-input-checked {
		border: 1px solid #85dbd0 !important;
	}

	/* #endif */

	/* #ifdef APP-PLUS || MP-WEIXIN */
	checkbox .wx-checkbox-input {
		border-radius: 50% !important;
	}

	uni-checkbox:not([disabled]) .wx-checkbox-input:hover {
		border-color: #85dbd0 !important;
	}

	checkbox .wx-checkbox-input.wx-checkbox-input-checked {
		border: 1px solid #85dbd0 !important;
	}

	/* #endif */
</style>
